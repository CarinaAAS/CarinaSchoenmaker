rm(list = ls())

ct=2
sumt = 0
model = 'bt'

beta_r = 0.05    #dependency parameter of predators
mu_r0 = 0.4   #constant
lambda_y0 = 1 #constant
gamma_y = 0.01  #dependency parameter of prey

x_r = 10 # nr. of predators
x_y = 5  # nr. of prey

WT = c(0) # waiting time
SE = c()  # speciation = 1, extinction = 0
BT = c(0) # branching time, sum of waiting times
L_vector = c() # vector that shows what kind of event takes place (sp/ex of predators/prey)
x_r_vector = c(x_r) # nr. of predators at every wt
x_y_vector = c(x_y) # nr. of prey at every wt
ind_vector = c()


while(sumt < ct){
  #update parameter
  if(model == 'bt'){
    lambda_r = beta_r*(x_y-1)
    mu_r = mu_r0
    lambda_y = lambda_y0
    mu_y = gamma_y*x_r 
  }
  
  if (x_y<5){mu_y=0}
  
   vector_rates = c(rep(lambda_r,x_r),rep(mu_r,x_r),rep(lambda_y,x_y),rep(mu_y,x_y))
   s  = sum(vector_rates)
   wt = rexp(n = 1,rate = s) # waiting time is exponentially distributed
   BD = rmultinom(1,1,vector_rates/s) # event: birth/death, multinomially distributed
   L = which(BD == 1)
   L_vector = append(L_vector, L)
  
  # find out where the 1 in rmultinom occurs, so where does the event occur before/on N (speciation) or after (extinction)
  # speciation of predators (x_r)
  ind = 0
  if(L <= x_r){
    # update tree  
    x_r= x_r+1
    SE = append(SE,1)
    x_r_vector = append(x_r_vector,x_r)
    x_y_vector = append(x_y_vector,x_y)
  ind=1
  }
  # extinction of predators (x_r)
  if (x_r< L & L <= (2*x_r) & ind == 0) {
    
    x_r = x_r-1           
    SE = append(SE,0)
    x_r_vector = append(x_r_vector,x_r)
    x_y_vector = append(x_y_vector,x_y)
  ind=2
  }
  #speciation of prey (x_y)
  if ((2*x_r)< L & L <= (2*x_r+x_y) & ind == 0) {
    x_y= x_y+1
    SE = append(SE,1)
     x_r_vector = append(x_r_vector,x_r)
     x_y_vector = append(x_y_vector,x_y)
   ind=3
  }
  #extinction of prey (x_y)
  if ((2*x_r+x_y) < L & ind == 0) {
    x_y = x_y-1           
    SE = append(SE,0)
    x_r_vector = append(x_r_vector,x_r)
    x_y_vector = append(x_y_vector,x_y)
  ind=4
    }
  
  WT = append(WT, wt)
  sumt = sum(WT)
  BT = append(BT, sumt)
  ind_vector = append(ind_vector, ind)


  # if the nr. of predators becomes 0, the tree should reboot
if (x_r == 0) {
 break()
}
}


p = list(wt=WT,E=SE)   ### ??? instead of using SE, use ind_vector as eventfunction????
p2 = p2phylo(p)
plot(p2)
axisPhylo(backward = F)

plot(BT,  x_r_vector, col='red',type = 'l')
par(new=TRUE)
plot(BT, x_y_vector, col='green',type = 'l')

#x_r_vector[i]*x_y_vector[i]*beta + x_r_vector[i]*mu0+x_y_vector[i]*lambda0+x_r_vector[i]*x_y_vector[i]*gamma


# Inference
ONE_vector = c()
i = 1
while (i <= (length(WT)-1)) {
  

 if (ind_vector[i] == 1) {
 ONE <- function(beta) x_r_vector[i] * x_y_vector[i] * beta
 ONE_vector = append(ONE_vector,ONE)
 }
 if (ind_vector[i] == 2) {
 ONE <- function(mu0) x_r_vector[i] * mu0
 ONE_vector = append(ONE_vector,ONE)
 }
 if (ind_vector[i] == 3) {
 ONE <- function(lambda0) x_y_vector[i] * lambda0
 ONE_vector = append(ONE_vector,ONE)
 }
 if (ind_vector[i] == 4) {
 ONE <- function(gamma) x_r_vector[i] * x_y_vector[i] * gamma
 ONE_vector = append(ONE_vector,ONE)
 }
i = i+1
}

L <- function(T,beta,mu0,lambda0,gamma) sum(-(x_r_vector[i]*x_y_vector[i]*beta + x_r_vector[i]*mu0+x_y_vector[i]*lambda0+x_r_vector[i]*x_y_vector[i]*gamma)*T + log(ONE_vector[i]))

L(1, 0.05,0.4,1,0.01)

optim(beta,mu0,lambda0,gamma,L)

  
p = sum(ind_vector==1)
q = sum(ind_vector==2)
r = sum(ind_vector==3)
s = sum(ind_vector==4)

beta_r_hat = p / sum(x_r_vector*x_y_vector*WT)
mu_r0_hat = q / sum(x_r_vector*WT)
lambda_y0_hat = r / sum(x_y_vector*WT)
gamma_y_hat = s / sum(x_r_vector*x_y_vector*WT)
